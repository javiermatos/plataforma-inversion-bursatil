#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Optimización de parámetros
\begin_inset CommandInset label
LatexCommand label
name "chap:Optimización de parámetros"

\end_inset


\end_layout

\begin_layout Standard
En la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Optimización de parámetros"

\end_inset

 se habló sobre la optimización de parámetros como parte de la funcionalidad
 provista por la plataforma.
 Además, se explicó el proceso para optimizar máquinas de trading, aplicable
 a aquellas desarrolladas en los capítulos 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Estrategias de trading"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Estrategias de trading compuestas"

\end_inset

.
 Como se dijo, el método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{optimize}
\end_layout

\end_inset

 es el responsable de lanzar el proceso de optimización, para lo cual precisa
 de tres funciones: la función de evaluación, que cuantifica el desempeño
 de la estrategia de acuerdo a cierto criterio; la función de selección,
 que sirve para indicar si se busca maximizar o minimizar el resultado;
 y la función que implementa el método de optimización.
 A modo de recordatorio, se muestra la forma de una llamada al método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{optimize}
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-5mm}
\backslash
texttt{
\backslash
begin{tabbing}
\end_layout

\begin_layout Plain Layout

algoTraderInstance.opti
\backslash
=mize(@evaluationFunction, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> @selectionFunction, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> @optimizationMethod, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> 'Parameter1', Domain1, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> 'Parameter2', Domain2, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> 'ParameterN', DomainN)
\end_layout

\begin_layout Plain Layout


\backslash
end{tabbing}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este capítulo se profundiza en la explicación del mecanismo de optimización
 y sus partes constituyentes.
 La sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Sobre la naturaleza del problema"

\end_inset

 discute la categoría del problema así como su nivel de complejidad.
 En la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Funciones de evaluación"

\end_inset

 se desarrollan algunas de las funciones de evaluación implementadas en
 la plataforma.
 Luego, en la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Funciones de selección"

\end_inset

, se habla de las dos funciones de selección.
 Los métodos de optimización, que constituyen la parte más compleja del
 capítulo, se describen en profundidad en la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Métodos de optimización"

\end_inset

.
\end_layout

\begin_layout Section
Sobre la naturaleza del problema
\begin_inset CommandInset label
LatexCommand label
name "sec:Sobre la naturaleza del problema"

\end_inset


\end_layout

\begin_layout Standard
El problema de asignar valores a los parámetros de una máquina de trading,
 para mejorar su desempeño según cierto criterio, es un problema de optimización
 combinatoria.
 En términos de complejidad computacional, este problema es de la clase
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{NP-hard}
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Garey_and_Johnson_1979"

\end_inset

.
\end_layout

\begin_layout Standard
En matemáticas aplicadas y en ciencias de la computación, la optimización
 combinatoria es una rama que consiste en encontrar la solución óptima de
 entre un conjunto de soluciones.
 Los problemas que resuelve la optimización combinatoria tienen como característ
ica que su conjunto de soluciones factibles es discreto o se puede reducir
 a un conjunto discreto.
 Es requisito para resolverlos el contar con una función que cuantifique
 la calidad de una solución.
\end_layout

\begin_layout Standard
En el contexto de este trabajo, las soluciones son las diferentes asignaciones
 de valores a los parámetros de la máquina de trading: de entre todas ellas,
 hay que encontrar la asignación óptima que logra el mejor desempeño de
 la máquina.
 En este proceso interviene la función de evaluación para medir la calidad
 de las soluciones y la función de selección para escoger la solución adecuada
 
\begin_inset CommandInset citation
LatexCommand cite
key "Cook_et_al._1997,Schrijver_2003"

\end_inset

.
\end_layout

\begin_layout Section
Funciones de evaluación
\begin_inset CommandInset label
LatexCommand label
name "sec:Funciones de evaluación"

\end_inset


\end_layout

\begin_layout Standard
Como se ha repetido en diferentes ocasiones, las funciones de evaluación
 miden el desempeño de la estrategia de trading de acuerdo con algún criterio.
 Son necesarias en el proceso de optimización de parámetros, pues guían
 al método de optimización en la búsqueda de aquellas soluciones (en forma
 de asignaciones de valores a los parámetros de la máquina) que mejor satisfacen
 los requisitos.
\end_layout

\begin_layout Standard
En esta sección se discuten las funciones de evaluación implementadas, el
 criterio que tienen en consideración y la manera en que son calculadas.
 Cabe recordar que, como punto de partida, todas las funciones de evaluación
 han de cumplir la signatura que aparece a continuación:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-5mm}
\backslash
texttt{
\backslash
begin{tabbing}
\end_layout

\begin_layout Plain Layout

performance = evaluationFunction(positionsLog, ...)
\end_layout

\begin_layout Plain Layout


\backslash
end{tabbing}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El argumento de salida 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{performance}
\end_layout

\end_inset

 es del tipo numérico y mide el desempeño de la estrategia.
 Los argumentos de entrada que admite la función son múltiples, donde el
 primero, identificado con 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{positionsLog}
\end_layout

\end_inset

, que es obligatorio, se refiere a la tabla con los registros de las posiciones
 tomadas en el mercado.
 El resto de argumentos son opcionales y sirven para enviar valores que
 pueda requerir la función de evaluación.
\end_layout

\begin_layout Standard
La tabla de registros que se pasa como argumento ya fue explicada en la
 sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Optimización de parámetros"

\end_inset

.
 Esta consiste en una matriz de dos dimensiones cuyas filas son los registros
 ordenados de forma cronológica y las columas los diferentes campos.
 El orden y la descripción de las columnas es el que aparece en la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Descripción de las columnas de la tabla de registros de posiciones en el mercado"

\end_inset

.
 Las columnas de la tabla se calculan con el método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{positionsLog}
\end_layout

\end_inset

 de la máquina de trading.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#columna
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descripción
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tipo de posición
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Índice de apertura
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Índice de cierre
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fecha de apertura
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fecha de cierre
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Precio de apertura
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Precio de cierre
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beneficio/Pérdida
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Descripción de las columnas de la tabla de registros de posición
\begin_inset CommandInset label
LatexCommand label
name "tab:Descripción de las columnas de la tabla de registros de posiciones en el mercado"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para aplicar las funciones de evaluación sobre las máquinas de trading hay
 que utilizar el método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{fitness}
\end_layout

\end_inset

.
 El primer argumento del método es la función de evaluación y el resto de
 argumentos, que son opcionales, son los que se pasan a la función de evaluación.
 Información más detallada sobre la utilización de este método aparece en
 la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:AlgoTrader.fitness"

\end_inset

.
\end_layout

\begin_layout Subsection
Beneficio/Pérdida
\end_layout

\begin_layout Standard
Una máquina de trading opera en el mercado bursátil mediante la compra y
 venta de acciones.
 Como resultado de su actividad, esta genera beneficios o incurre en pérdidas.
 Desde el prisma de las finanzas, la maquina de trading puede entenderse
 como una inversión con un nivel de riesgo que proporciona rentabilidad
 sobre el dinero que se invierte.
 En consecuencia, un criterio para medir el rendimiento de estas máquinas
 consiste en calcular la rentabilidad de la inversión, que se hace como
 aparece en la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Rentabilidad de una inversión"

\end_inset

.
\end_layout

\begin_layout Standard
La función de evaluación de los beneficios y las pérdidas es un procedimiento
 que calcula la razón entre los fondos finales que conserva la máquina de
 trading y los fondos iniciales con que contó.
 A esta razón se la llama el factor de rentabilidad y su cálculo se realiza
 de acuerdo a la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Factor de rentabilidad"

\end_inset

.
 Con la fórmula se deduce lo siguiente: si el factor de rentabilidad es
 mayor a la unidad, entonces la inversión produce beneficios; en caso contrario,
 la inversión va asociada a una pérdida de capital.
 Esta función de evaluación se usa en combinación con la función de selección
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{max}
\end_layout

\end_inset

, pues es una medida que se busca maximizar en las máquinas.
 El factor de rentabilidad está relacionado de forma estrecha con la rentabilida
d, como se desprende de las ecuaciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Rentabilidad a Factor de rentabilidad"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Factor de rentabilidad a Rentabilidad"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Rentabilidad=\frac{Beneficio/Pérdida}{Inversión}\cdot100\label{eq:Rentabilidad de una inversión}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Factor\; de\; rentabilidad=\frac{Capital\; final}{Capital\; inicial}=\frac{Beneficio/Pérdida+Inversión}{Inversión}\label{eq:Factor de rentabilidad}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Rentabilidad=(Factor\; de\; rentabilidad-1)\cdot100\label{eq:Rentabilidad a Factor de rentabilidad}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Factor\; de\; rentabilidad=(Rentabilidad/100)+1\label{eq:Factor de rentabilidad a Rentabilidad}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Los datos de partida para calcular el factor de rentabilidad de la máquina
 de trading están contenidos en la tabla de registros, que se pasa a las
 funciones de evaluación como argumento.
 En particular, la octava columna de esta tabla almacena el factor de rentabilid
ad de cada una de las posiciones que fueron adoptadas por la máquina.
 Para calcular el factor de rentabilidad de la máquina hay que multiplicar
 entre sí los factores de rentabilidad de cada una de las posiciones.
 Esto se resume en la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Función de evaluación Beneficio/Pérdida"

\end_inset

 para una tabla de registros con 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n$
\end_layout

\end_inset

 filas.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{rl}
Factor\; de\; rentabilidad= & Factor\; de\; rentabilidad_{1}\\
 & \cdot Factor\; de\; rentabilidad_{2}\\
 & \vdots\\
 & \cdot Factor\; de\; rentabilidad_{n}
\end{array}\label{eq:Función de evaluación Beneficio/Pérdida}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{profitLoss}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función de evaluación 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{profitLoss}
\end_layout

\end_inset

 calcula el rendimiento de una máquina de trading según se ha explicado
 en esta sección.
 Una posible manera de implementar la función es como aparece en el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:profitLoss"

\end_inset

.
 Se aprecia que sólo es necesaria la última columna de la tabla de registros
 de posición para el cálculo del valor.
\begin_inset Float figure
placement t
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function performance = profitLoss(positionsLog)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% [ ...
\end_layout

\begin_layout Plain Layout

%     positionType, ...
\end_layout

\begin_layout Plain Layout

%     openIndex, ...
\end_layout

\begin_layout Plain Layout

%     closeIndex, ...
\end_layout

\begin_layout Plain Layout

%     openDate, ...
\end_layout

\begin_layout Plain Layout

%     closeDate, ...
\end_layout

\begin_layout Plain Layout

%     openPrice, ...
\end_layout

\begin_layout Plain Layout

%     closePrice, ...
\end_layout

\begin_layout Plain Layout

%     profitLoss ...
\end_layout

\begin_layout Plain Layout

% ] ...
\end_layout

\begin_layout Plain Layout

% = positionsLog;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

performance = prod(positionsLog(:,8));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Función de evaluación 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{profitLoss}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:profitLoss"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pérdida
\end_layout

\begin_layout Standard
El factor de rentabilidad es una buena medida para cuantificar la calidad
 de una máquina de trading, sin embargo, sucede que tal medida no aporta
 mucha información sobre el factor de rentabilidad de cada una de las posiciones
 que adoptó la máquina en el mercado de acciones.
 Así, por ejemplo, las máquinas de trading 
\begin_inset ERT
status open

\begin_layout Plain Layout

$A$
\end_layout

\end_inset

 y 
\begin_inset ERT
status open

\begin_layout Plain Layout

$B$
\end_layout

\end_inset

 pueden tener un mismo factor de rentabilidad, aunque el factor de rentabilidad
 de cada una de sus posiciones sea muy diferente, como queda reflejado en
 la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Comparación de factores de rentabilidad"

\end_inset

.
 En una situación como esta, aunque ambas máquinas tengan el mismo factor
 de rentabilidad, se prefiere a la máquina 
\begin_inset ERT
status open

\begin_layout Plain Layout

$A$
\end_layout

\end_inset

, pues tiene un comportamiento más estable.
 La estabilidad de una máquina se relaciona con el riesgo que se asume al
 invertir en ella: cuanto más estables son los resultados de la máquina,
 menor es el riesgo asumido.
 Este es un factor muy importante que condiciona las decisiones de inversión
 en finanzas.
 La rentabilidad y el riesgo son objetivos que están en conflicto el uno
 con el otro: mayor rentabilidad implica mayor riesgo y viceversa.
\end_layout

\begin_layout Standard
En este sentido, un criterio más conservador consiste en medir únicamente
 las pérdidas.
 Para calcular este valor, primero hay que explicar la descomposición que
 se hace del factor de rentabilidad, resumida en la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Descomposición del factor de rentabilidad"

\end_inset

.
 Como punto de partida se tiene la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Función de evaluación Beneficio/Pérdida"

\end_inset

, donde el valor se calcula a partir del producto de los factores de rentabilida
d de cada posición adoptada por la máquina.
 A partir de esta ecuación, se agrupan los factores de rentabilidad en dos
 grupos: por un lado aquellos mayores a la unidad, cuyo producto da lugar
 al factor de beneficio; por el otro los menores a la unidad, que se multiplican
 para obtener el factor de pérdida.
 De esta manera, la función de evaluación de las pérdidas devuelve el factor
 de pérdida asociada a la máquina de trading, es decir, el producto de aquellas
 posiciones con factor de rentabilidad menor a la unidad.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{l}
Factor\; de\; rentabilidad_{A}=1.8=1.5\cdot1.2\\
Factor\; de\; rentabilidad_{B}=1.8=0.75\cdot4\cdot0.6
\end{array}\label{eq:Comparación de factores de rentabilidad}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Factor\; de\; rentabilidad=Factor\; de\; beneficio\cdot Factor\; de\; pérdida\label{eq:Descomposición del factor de rentabilidad}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{loss}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función de evaluación que calcula el factor de pérdidas es 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{loss}
\end_layout

\end_inset

.
 Para implementar esta función se puede hacer como aparece en el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:loss"

\end_inset

.
 Existe un caso de excepción en el código que se da cuando no hay posiciones
 con pérdidas, situación ante la cual se devuelve cero.
\begin_inset Float figure
placement t
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function performance = loss(positionsLog)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% [ ...
\end_layout

\begin_layout Plain Layout

%     positionType, ...
\end_layout

\begin_layout Plain Layout

%     openIndex, ...
\end_layout

\begin_layout Plain Layout

%     closeIndex, ...
\end_layout

\begin_layout Plain Layout

%     openDate, ...
\end_layout

\begin_layout Plain Layout

%     closeDate, ...
\end_layout

\begin_layout Plain Layout

%     openPrice, ...
\end_layout

\begin_layout Plain Layout

%     closePrice, ...
\end_layout

\begin_layout Plain Layout

%     profitLoss ...
\end_layout

\begin_layout Plain Layout

% ] ...
\end_layout

\begin_layout Plain Layout

% = positionsLog;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

loss = positionsLog(positionsLog(:,8)<1,8);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if isempty(loss)
\end_layout

\begin_layout Plain Layout

    performance = 0;
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

    performance = prod(loss);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\begin_inset Caption

\begin_layout Plain Layout
Función de evaluación 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{loss}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:loss"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mínimo beneficio/pérdida esperado
\end_layout

\begin_layout Standard
En el primer criterio de evaluación, consistente en medir el factor de rentabili
dad, no se tiene en cuenta la estabilidad de la máquina de trading, pues
 se ignora el riesgo; en el segundo criterio, que mide el factor de pérdida,
 se ofrece una visión sesgada al pasar por alto aquellas posiciones que
 generan beneficios, centrándose sólo en las que dan pérdidas.
\end_layout

\begin_layout Standard
Una buena función de evaluación debe tener en cuenta los beneficios y pérdidas
 de todas las posiciones adoptadas en el mercado (maximizar la rentabilidad)
 y también la variación de estos valores (minimizar el riesgo).
 En este sentido, se define la función de evaluación del mínimo beneficio/pérdid
a esperado como la diferencia entre la media y la desviación estándar de
 los factores de rentabilidad de las posiciones de mercado.
 Esta definición queda recogida en la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Mínimo beneficio/pérdida esperado"

\end_inset

.
 En la fórmula, la media contribuye a medir la rentabilidad, que se quiere
 maximizar, y la desviación estándar cuantifica la inestabilidad, que se
 desea minimizar.
 Esta función promociona a las máquinas de trading más rentables a la par
 que penaliza a aquellas con comportamiento más impredecible, que a la postre
 son las que entrañan mayor riesgo.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Mínimo\; beneficio/pérdida\; esperado=Media-Desviación\; estándar\label{eq:Mínimo beneficio/pérdida esperado}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Media=\frac{1}{n}\cdot\sum_{i=1}^{n}Factor\; de\; rentabilidad_{i}\label{eq:Media}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Desviación\; estándar=\sqrt{\frac{1}{n}\cdot\left(\sum_{i=1}^{n}Factor\; de\; rentabilidad_{i}^{2}\right)-Media^{2}}\label{eq:Desviación estándar}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{minProfitLossExpected}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función de evaluación descrita es 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{minProfitLossExpected}
\end_layout

\end_inset

.
 En el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:minProfitLossExpected"

\end_inset

 aparece cómo implementarla.
 De nuevo, sólo se necesita utilizar la información contenida en la ultima
 columna de la tabla.
\begin_inset Float figure
placement t
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function performance = minProfitLossExpected(positionsLog)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% [ ...
\end_layout

\begin_layout Plain Layout

%     positionType, ...
\end_layout

\begin_layout Plain Layout

%     openIndex, ...
\end_layout

\begin_layout Plain Layout

%     closeIndex, ...
\end_layout

\begin_layout Plain Layout

%     openDate, ...
\end_layout

\begin_layout Plain Layout

%     closeDate, ...
\end_layout

\begin_layout Plain Layout

%     openPrice, ...
\end_layout

\begin_layout Plain Layout

%     closePrice, ...
\end_layout

\begin_layout Plain Layout

%     profitLoss ...
\end_layout

\begin_layout Plain Layout

% ] ...
\end_layout

\begin_layout Plain Layout

% = positionsLog;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

profitLoss = positionsLog(:,8);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

meanProfitLoss = sum(profitLoss)/length(profitLoss);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

stdProfitLoss = ...
\end_layout

\begin_layout Plain Layout

    sqrt(sum((profitLoss-meanProfitLoss).^2) ...
\end_layout

\begin_layout Plain Layout

        /length(profitLoss));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

performance = meanProfitLoss - stdProfitLoss;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\begin_inset Caption

\begin_layout Plain Layout
Función de evaluación 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{minProfitLossExpected}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:minProfitLossExpected"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Funciones de selección
\begin_inset CommandInset label
LatexCommand label
name "sec:Funciones de selección"

\end_inset


\end_layout

\begin_layout Standard
Las funciones de selección determinan la dirección en la búsqueda de la
 solución.
 Las dos funciones de selección son 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{max}
\end_layout

\end_inset

, que se usa para maximizar, y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{min}
\end_layout

\end_inset

, que se empléa para minimizar.
 Estas funciones están relacionadas con las funciones de evaluación, pues
 las complementan para definir de forma precisa el objetivo que persigue
 el algoritmo de optimización.
 Las funciones de evaluación son las responsables de hacer las mediciones,
 mientras que las funciones de selección establecen una relación de orden
 entre estas.
 El orden inducido entre las mediciones hace posible las comparaciones y
 la selección del óptimo.
 Las funciones 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{max}
\end_layout

\end_inset

 y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{min}
\end_layout

\end_inset

 son parte del conjunto de funciones de MATLAB.
\end_layout

\begin_layout Section
Métodos de optimización
\begin_inset CommandInset label
LatexCommand label
name "sec:Métodos de optimización"

\end_inset


\end_layout

\begin_layout Standard
Como se menciona en la sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Sobre la naturaleza del problema"

\end_inset

, se enfrenta un problema de optimización combinatoria cuando se busca optimizar
 el valor de los parámetros de la máquina de trading.
 Existen multitud de algoritmos que resuelven este problema de manera más
 o menos satisfactoria.
 Esta sección recoge aquellos métodos de optimización desarrollados para
 utilizar en la plataforma.
\end_layout

\begin_layout Standard
Los métodos de optimización requieren de la función de selección, la función
 de fitness (que la genera el método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{optimize}
\end_layout

\end_inset

) y las características del espacio de búsqueda (en particular, el tamaño
 de cada dimensión).
 Como resultado, el método devuelve la mejor solución encontrada en el espacio
 de búsqueda.
 La llamada a los métodos de optimización tienen el siguiente formato:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-5mm}
\backslash
texttt{
\backslash
begin{tabbing}
\end_layout

\begin_layout Plain Layout

bestIndexArray = opti
\backslash
=mizationMethod(@selectionFunction,
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> @fitnessFunction, searchSpaceSize, ...)
\end_layout

\begin_layout Plain Layout


\backslash
end{tabbing}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La elección de los métodos implementados en la plataforma se debe a las
 características del problema que se afronta.
 En muchas ocasiones, el espacio de búsqueda suele ser relativamente manejable,
 en cuyo caso, el examinar todas las combinaciones de valores de los parámetros
 es algo factible.
 Por el contrario, también hay veces en que el espacio de búsqueda es mucho
 más grande y un recorrido exhaustivo no es factible.
 En esta situación, hay métodos de optimización más eficientes que se pueden
 emplear, como por ejemplo aquellos basados en metaheurísticas.
\end_layout

\begin_layout Standard
Un uso especial que se puede dar a un método de optimización es el de simular
 la conducta de un inversor en el momento de asignar valores a los parámetros
 de la máquina.
 El inversor actúa probando diferentes valores para los parámetros y conservando
 aquella configuración que mejor resultado produce.
 La utilidad de un método así estriba en proporcionar resultados que sirven
 de base para comparar con otros métodos o estimar el logro que alcanza
 un inversor con cierto nivel de habilidad.
 Para incluir esta posibilidad, la plataforma implementa el método de busqueda
 aleatoria.
\end_layout

\begin_layout Subsection
Método enumerativo
\begin_inset CommandInset label
LatexCommand label
name "sec:Método enumerativo"

\end_inset


\end_layout

\begin_layout Standard
El método de optimización enumerativo es tal que, para encontrar la mejor
 solución a la instancia de un problema, examina todas y cada una de las
 soluciones candidatas del espacio de búsqueda.
 Este método encuentra siempre la mejor solución, aunque su complejidad
 temporal lo hace impracticable para instancias de problemas donde el espacio
 de búsqueda es relativamente grande.
\end_layout

\begin_layout Standard
En el contexto de la optimización de parámetros para las máquinas de trading,
 el procedimiento que aplica el método es el de probar todas y cada una
 de las combinaciones de valores para los parámetros.
 De entre ellas, conserva la asignación que da lugar a los mejores resultados.
\end_layout

\begin_layout Standard
El método enumerativo está implementado en la función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustiveSequential}
\end_layout

\end_inset

.
 También existe una versión paralela que, para hacer uso de todas las unidades
 de procesamiento de la máquina, divide el espacio de búsqueda en partes.
 La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustive}
\end_layout

\end_inset

 contiene dicha implementación paralela.
\end_layout

\begin_layout Standard
La importancia de este método es notable: la evaluación de todas las soluciones
 del espacio de búsqueda se utiliza en el análisis estadístico del método
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{fitnessStatistics}
\end_layout

\end_inset

 y en la representación del espacio de búsqueda de los métodos 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{plotSearchSpace}
\end_layout

\end_inset

 y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{plotSearchSpace123}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustiveSequential}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El método enumerativo para la optimización combinatoria está desarrollado
 en la función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustiveSequential}
\end_layout

\end_inset

.
 Su implementación es idéntica a la que aparece en el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:exhaustive"

\end_inset

, salvo por el detalle de que el bucle principal de la función, en lugar
 de ser 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parfor}
\end_layout

\end_inset

, es 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{for}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
La función auxiliar 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray}
\end_layout

\end_inset

 transforma un índice del espacio unidimensional a un conjunto de índices
 del espacio multidimensional.
 Conocidos los tamaños de las diferentes dimensiones del espacio multidimensiona
l, esta función sirve para recorrer dicho espacio con el índice de un bucle.
 En la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:index2indexArray"

\end_inset

 se muestra el valor devuelto conforme a los argumentos de entrada.
 El primer argumento de la función es un vector con los tamaños de cada
 una de las dimensiones, el segundo es el índice unidimensional a convertir
 en el conjunto de indices del espacio multidimensional.
 El valor de este segundo argumento ha de estar comprendido dentro del intervalo
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$[1 
\backslash
enskip n]$
\end_layout

\end_inset

, donde 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n$
\end_layout

\end_inset

 es el producto de los tamaños de las dimensiones del espacio de búsqueda,
 que en el ejemplo es 
\begin_inset ERT
status open

\begin_layout Plain Layout

$5 
\backslash
cdot 7 
\backslash
cdot 10 
\backslash
cdot 3 = 1050$
\end_layout

\end_inset

.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instrucción de llamada
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valor devuelto
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray([5 7 10 3],1)}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{[1 1 1 1]}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray([5 7 10 3],2)}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{[2 1 1 1]}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vdots$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vdots$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray([5 7 10 3],525)}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{[5 7 5 2]}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vdots$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vdots$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray([5 7 10 3],1049)}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{[4 7 10 3]}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray([5 7 10 3],1050)}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{[5 7 10 3]}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultados de la función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:index2indexArray"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustive}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La versión paralela del método enumerativo está en la función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustive}
\end_layout

\end_inset

, cuya implementación aparece en el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:exhaustive"

\end_inset

.
 El paralelismo se alcanza en este caso utilizando la versión paralela del
 bucle 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{for}
\end_layout

\end_inset

, que se introduce en el código con la palabra reservada 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parfor}
\end_layout

\end_inset

.
 Tal funcionalidad la proporciona la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Parallel Computing Toolbox}
\end_layout

\end_inset

 de MATLAB.
\end_layout

\begin_layout Standard
El código que implementa este método esconde sutilezas para particionar
 de forma adecuada el espacio de búsqueda.
 En particular, MATLAB puede referenciar elementos de una estructura de
 datos multidimensional utilizando un vector de indices, uno para cada dimensión
, o un único índice global.
 No obstante, el proceso de conversión del vector de indices al índice global
 y viceversa ha de ser realizado con cuidado para que, en todo momento,
 ambos referencien al mismo elemento de la estructura.
 Esta tarea es justo la que realiza la función auxiliar 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{index2indexArray}
\end_layout

\end_inset

.
 La utilidad de la conversión reside en que el bucle 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{parfor}
\end_layout

\end_inset

 de MATLAB no aprovecha bien el paralelimo del hardware con estructuras
 multidimensionales, pero sí lo hace de forma óptima sobre estructuras unidimens
ionales.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function [bestIndexArray, searchSpace] = exhaustive( ...
\end_layout

\begin_layout Plain Layout

    selectionFunction, fitnessFunction, searchSpaceSize)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if length(searchSpaceSize) == 1
\end_layout

\begin_layout Plain Layout

    searchSpace = zeros(searchSpaceSize,1);
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

    searchSpace = zeros(searchSpaceSize);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

parfor i = 1:prod(searchSpaceSize)
\end_layout

\begin_layout Plain Layout

    indexArray = index2indexArray(searchSpaceSize,i);
\end_layout

\begin_layout Plain Layout

    searchSpace(i) = feval(fitnessFunction,indexArray);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Get first best value
\end_layout

\begin_layout Plain Layout

[~, index] = selectionFunction(searchSpace(:));
\end_layout

\begin_layout Plain Layout

bestIndexArray = index2indexArray(searchSpaceSize,index);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function indexArray = index2indexArray(searchSpaceSize, n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

n = n-1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

N = length(searchSpaceSize);
\end_layout

\begin_layout Plain Layout

indexArray = zeros(1, N);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i = N:-1:1
\end_layout

\begin_layout Plain Layout

    baseValue = prod(searchSpaceSize(1:i-1));
\end_layout

\begin_layout Plain Layout

    idiv = floor(n/baseValue);
\end_layout

\begin_layout Plain Layout

    n = n - idiv*baseValue;
\end_layout

\begin_layout Plain Layout

    indexArray(i) = idiv;
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

indexArray = indexArray+1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\begin_inset Caption

\begin_layout Plain Layout
Función de optimización 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustive}
\end_layout

\end_inset

 basada en el método enumerativo
\begin_inset Argument
status open

\begin_layout Plain Layout
Función de optimización 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{exhaustive}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:exhaustive"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Búsqueda aleatoria
\begin_inset CommandInset label
LatexCommand label
name "sec:Búsqueda aleatoria"

\end_inset


\end_layout

\begin_layout Standard
El método de búsqueda aleatoria, también conocido como 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Random Search}
\end_layout

\end_inset

 en la literatura inglesa, se atribuye a Leonid A.
 Rastrigin 
\begin_inset CommandInset citation
LatexCommand cite
key "Rastrigin_1963"

\end_inset

.
 La forma en que funciona este método es generando soluciones de manera
 aleatoria y conservando, a lo largo de las iteraciones que dura el proceso,
 la mejor solución encontrada.
\end_layout

\begin_layout Standard
Este método, a diferencia del enumerativo, no asegura encontrar la solución
 óptima, sin embargo, proporciona una solución de compromiso y lo hace de
 forma rápida con independencia del tamaño del espacio de búsqueda.
 La calidad del resultado en este caso depende del tamaño del espacio de
 búsqueda y del número de iteraciones que se realizan.
 Más aún, si hay una solución óptima en un espacio de búsqueda con 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n$
\end_layout

\end_inset

 soluciones, entonces la probabilidad de encontrar tal solución efectuando
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$i$
\end_layout

\end_inset

 iteraciones se calcula con la ecuación
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Probabilidad de solución óptima"

\end_inset

.
 Se observa que esta probabilidad es mayor cuantas más iteraciones se hacen
 y menor es el espacio de búsqueda.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P(encontrar\; solución\;óptima)=1-\left(1-\frac{1}{n}\right)^{i}\label{eq:Probabilidad de solución óptima}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{randomSearch}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La optimización por el método de búsqueda aleatoria se hace con la función
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{randomSearch}
\end_layout

\end_inset

, cuya implementación aparece en el código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:randomSearch"

\end_inset

.
 Esta función utiliza un argumento de entrada específico que es 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{iterations}
\end_layout

\end_inset

, con el que establece el número de iteraciones que realiza el método: para
 pasarle un valor, se utiliza la construcción 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{
\backslash
{@random, numeroIteraciones
\backslash
}}
\end_layout

\end_inset

 como tercer argumento del método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{optimize}
\end_layout

\end_inset

, siendo los dos primeros la función de evaluación y la de selección.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function bestIndexArray = randomSearch( ...
\end_layout

\begin_layout Plain Layout

    selectionFunction, fitnessFunction, searchSpaceSize, ...
\end_layout

\begin_layout Plain Layout

    iterations)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Número de iteraciones predeterminado
\end_layout

\begin_layout Plain Layout

if ~exist('iterations','var'); iterations = 500; end;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Aplicar función de selección
\end_layout

\begin_layout Plain Layout

if strcmp(func2str(@max),func2str(selectionFunction))
\end_layout

\begin_layout Plain Layout

    objectiveMaximize = true;
\end_layout

\begin_layout Plain Layout

    bestFitness = -Inf;
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

    objectiveMaximize = false;
\end_layout

\begin_layout Plain Layout

    bestFitness = Inf;
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bestIndexArray = [];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Bucle principal
\end_layout

\begin_layout Plain Layout

for i = 1:iterations
\end_layout

\begin_layout Plain Layout

    indexArray = ones(1, ...
\end_layout

\begin_layout Plain Layout

        length(searchSpaceSize)) ...
\end_layout

\begin_layout Plain Layout

        +round(rand(1, ...
\end_layout

\begin_layout Plain Layout

            length(searchSpaceSize)).*(searchSpaceSize-1));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    currentFitness = fitnessFunction(indexArray);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if objectiveMaximize && bestFitness<currentFitness
\end_layout

\begin_layout Plain Layout

        bestIndexArray = indexArray;
\end_layout

\begin_layout Plain Layout

        bestFitness = currentFitness;
\end_layout

\begin_layout Plain Layout

    elseif ~objectiveMaximize && bestFitness>currentFitness
\end_layout

\begin_layout Plain Layout

        bestIndexArray = indexArray;
\end_layout

\begin_layout Plain Layout

        bestFitness = currentFitness;
\end_layout

\begin_layout Plain Layout

    end
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\begin_inset Caption

\begin_layout Plain Layout
Función de optimización 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{randomSearch}
\end_layout

\end_inset

 basada en el método de la búsqueda aleatoria
\begin_inset Argument
status open

\begin_layout Plain Layout
Función de optimización 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{randomSearch}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:randomSearch"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Algoritmo genético
\begin_inset CommandInset label
LatexCommand label
name "sec:Algoritmo genético"

\end_inset


\end_layout

\begin_layout Standard
Un algoritmo genético, o 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Genetic Algorithm}
\end_layout

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "GA"
description "Genetic Algorithm"

\end_inset

 en inglés, es un método de búsqueda que se inspira en el proceso de la
 evolución natural.
 Esta heurística se utiliza habitualmente para generar soluciones a problemas
 de optimización y búsqueda.
 Desde su invención por parte de John H.
 Holland 
\begin_inset CommandInset citation
LatexCommand cite
key "Holland_1992"

\end_inset

, ha sido aplicada de forma exitosa en un ámplio conjunto de problemas.
\end_layout

\begin_layout Subsubsection
Metodología
\end_layout

\begin_layout Standard
En un algoritmo genético, una población de cadenas (llamadas cromosomas
 o el genotipo del genoma), que codifican soluciones candidatas (llamadas
 invidividuos, criaturas o fenotipo) de un problema de optimización, evolucionan
 hacia mejores soluciones.
 De forma tradicional, las soluciones se representan con cadenas binarias,
 aunque otros tipos de codificaciones son posibles.
 La evolución, que comienza desde una población de individuos generados
 de forma aleatoria, ocurre con el paso de las generaciones.
 En cada paso generacional se selecciona de forma estocástica un subconjunto
 de individuos de la población (de acuerdo a su aptitud) y se modifican
 (mediante recombinaciones e incluso mutaciones aleatorias) para formar
 la nueva población.
 Esta nueva población se utiliza en la siguiente iteración del algoritmo.
 Por lo general, el algoritmo termina cuando alcanza el número máximo de
 generaciones o cuando se logra un nivel de aptitud satisfactorio en la
 población.
\end_layout

\begin_layout Standard
La representación habitual de las soluciones se hace con cadenas de bits.
 También es posible utilizar cadenas con tipos y estructuras diferentes
 de la misma manera.
 La característica principal que hace convenientes a estas representaciones
 genéticas es que sus partes se pueden alinear con facilidad debido a su
 tamaño fijo, lo cual facilita el cruce entre individuos.
\end_layout

\begin_layout Standard
La función de fitness se define sobre la representación genética y mide
 la calidad de la solución representada.
 Esta función siempre es dependiente del problema.
 En el caso de este trabajo, la función de fitness se genera de forma automática
 con la función de evaluación y el espacio de búsqueda.
 De esta manera, el usuario se limita a crear funciones de evaluación en
 términos del problema y no se ve expuesto a la situación de entender cómo
 funcionan los métodos de optimización o qué codificación es preciso utilizar.
\end_layout

\begin_layout Standard
Para entender en profundidad los algoritmos evolutivos es necesario comprender
 todas las fases a las que se someten los individuos de la población.
 En la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Algoritmo genético"

\end_inset

 aparece la representación del esquema de funcionamiento de un algoritmo
 genético.
 Las fases de que consta son las siguientes:
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Gráficos/Optimización de parámetros/Algoritmo genético.eps
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Esquema de un algoritmo genético
\begin_inset CommandInset label
LatexCommand label
name "fig:Algoritmo genético"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Inicio Al comienzo del algoritmo, los individuos de la población se generan
 de forma aleatoria.
 El tamaño de la población depende de la naturaleza del problema: a problemas
 más duros y con más óptimos locales, mayor es el tamaño de población que
 se suele utilizar.
 Lo habitual es generar la población aleatoriamente para así cubrir el mayor
 rango posible de soluciones en el espacio de búsqueda, no obstante, los
 individuos también pueden ser generados en zonas donde es probable que
 se encuentren las soluciones óptimas.
 Para este segundo caso es habitual utilizar algoritmos ávidos o soluciones
 almacenadas de ejecuciones anteriores.
\end_layout

\begin_layout Description
Evaluación A cada uno de los individuos de la población se le aplica la
 función de aptitud para cuantificar la bondad de la solución que codifica.
 Este es, por lo general, el proceso más costoso en términos computacionales
 para aquellas metaheurísticas basadas en poblaciones.
\end_layout

\begin_layout Description
Selección En cada generación, una proporción de la población vigente se
 selecciona para crear a la nueva población.
 Los individuos son elegidos a través de un proceso estocástico donde las
 soluciones más aptas (según establece la función de fitness) tienen mayor
 probabilidad de ser escogidas.
 Ciertos métodos de selección eligen preferiblemente a los mejores individuos;
 otros métodos lo hacen de manera aleatoria, pues este proceso puede llegar
 a ser costoso y tener una repercusión demasiado negativa en el algoritmo.
\end_layout

\begin_layout Description
Cruce El cruce genera nuevos individuos en la población a partir de los
 individuos seleccionados.
 Para crear cada nuevo individuo, un par de 
\begin_inset Quotes eld
\end_inset

padres
\begin_inset Quotes erd
\end_inset

 se combinan de acuerdo a las reglas establecidas por el operador de cruce.
 El 
\begin_inset Quotes eld
\end_inset

hijo
\begin_inset Quotes erd
\end_inset

, producto del cruce, comparte muchas de las características de sus 
\begin_inset Quotes eld
\end_inset

padres
\begin_inset Quotes erd
\end_inset

.
 Este proceso de reproducción se repite sobre los individuos seleccionados
 hasta dar lugar a una cierta cantidad de nuevos individuos.
 Aunque los métodos de reproducción basados en dos padres son más fieles
 a la biología, también es posible considerar un número diferente de progenitore
s.
\end_layout

\begin_layout Description
Mutación La mutación es un proceso que altera la configuración genética
 de los individuos.
 Así, se diversifica la población para evitar la convergencia prematura
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
El término convergencia prematura se refiere a que la población ha convergido
 demasiado pronto, siendo la consecuencia un resultado subóptimo.
\end_layout

\end_inset

 y se alcanzan zonas del espacio de búsqueda posiblemente no exploradas.
 Consiste en realizar variaciones en los genes de un individuo.
 Puede ser más o menos agresiva en virtud del número de genes modificados
 y la cuantía de la modificación.
\end_layout

\begin_layout Description
Reemplazo El número de individuos de la población se mantiene constante
 a lo largo de las generaciones.
 Después del cruce, se producen nuevos individuos que compiten con los de
 la población actual para formar parte de la nueva población.
 El reemplazo es una fase donde se determina de qué manera los nuevos individuos
 y los de la población actual se seleccionan para configurar la nueva población.
 Entre las opciones más comunes figuran la sustitución de la población al
 completo o la selección de los mejores individuos de entre los descendientes
 y la población actual.
\end_layout

\begin_layout Description
Condición
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

parada El criterio para detener la ejecución y devolver el resultado se
 establece en la condición de parada.
 Tal condición se evalúa en cada paso generacional, donde el algoritmo decide
 si ha de proseguir con el ciclo o si por el contrario lo detiene.
 Las condiciones habituales para detener la computación son el número de
 pasos generacionales, el tiempo de ejecución, la convergencia de la población
 o un nivel de aptitud satisfactorio en la población.
\end_layout

\begin_layout Standard
Los algoritmos genéticos, al igual que tantas otras metaheurísticas, permiten
 aprovechar el paralelismo del hardware de forma natural: a esta característica
 se la conoce como 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{paralelismo implícito}
\end_layout

\end_inset

.
 Para ello, basta con lanzar un algoritmo genético por unidad de procesamiento.
 A partir de ahí, el paralelismo puede aprovecharse de dos maneras: ejecuciones
 independientes que compiten entre sí para alcanzar el mejor resultado o
 ejecuciones dependientes que colaboran compartiendo individuos en el proceso
 de optimización.
 En el segundo caso, hay que establecer un fase de migración en el algoritmo
 original.
 Al algoritmo resultante se lo conoce como algoritmo genético distribuido
 en islas, cuyo esquema de funcionamiento aparece en la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Algoritmo genético distribuido"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Gráficos/Optimización de parámetros/Algoritmo genético distribuido.eps
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Esquema de un algoritmo genético distribuido en islas
\begin_inset CommandInset label
LatexCommand label
name "fig:Algoritmo genético distribuido"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Migración La migración es el proceso por el cual diferentes instancias del
 algoritmo genético intercambian individuos, para resolver el problema de
 forma colaborativa.
 El proceso migratorio se lanza cuando en una población el mejor individuo
 no se ve superado a lo largo de los pasos generacionales.
 En este caso, dicha población recibe a un individuo de otra población,
 con la esperanza de que la variabilidad genética que trae consigo permita
 generar individuos más óptimos.
\end_layout

\begin_layout Subsubsection
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{geneticAlgorithm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{geneticAlgorithm}
\end_layout

\end_inset

 implementa el algoritmo genético distribuido en islas.
 El algoritmo se sustenta sobre las primitivas de la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Parallel Computing Toolbox}
\end_layout

\end_inset

.
 El número de islas que se crean es variable y depende del número de sesiones
 MATLAB para computación en paralelo
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
MATLAB permite crear sesiones para realizar computaciones en paralelo.
 Una sesión es una entidad con capacidades de computación.
 De esta manera, se pueden crear tantas sesiones locales como unidades de
 procesamiento tenga la máquina, e incluso más.
 Una vez abiertas las sesiones, las funciones programadas con las primitivas
 paralelas de la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Parallel Computing Toolbox}
\end_layout

\end_inset

 experimentan un incremento de la velocidad, al utilizar más recursos hardware.
 Las sesiones MATLAB se abren y cierran con el comando 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{matlabpool}
\end_layout

\end_inset

.
\end_layout

\end_inset

.
 Las características de este algoritmo, respecto a las fases del algoritmo
 genético son las siguientes:
\end_layout

\begin_layout Itemize
En el inicio se crean los individuos de forma aleatoria.
 Esto, trasladado al contexto de las máquinas de trading, significa que
 se crean máquinas donde cada parámetro a optimizar toma un valor cualquiera
 del conjunto de valores admisibles.
 El número de poblaciones y el de individuos por población se fijan con
 los parámetros 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{nPopulations}
\end_layout

\end_inset

 y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{nIndividuals}
\end_layout

\end_inset

, cuyos valores por defecto aparecen en la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Valores por defecto de geneticAlgorithm"

\end_inset

.
\end_layout

\begin_layout Itemize
Durante la fase de evaluación, los individuos (que se refieren a máquinas
 de trading con parámetros concretos) miden su nivel de aptitud con la función
 de fitness.
 Tal función la genera de manera automática el método 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{optimize}
\end_layout

\end_inset

 a partir de una función de evaluación.
\end_layout

\begin_layout Itemize
El proceso de selección de individuos para el cruce no tiene en cuenta la
 aptitud: todos los individuos tienen la misma probabilidad de ser seleccionados.
 De esta manera, se propicia la variabilidad genética y la exploración del
 espacio de búsqueda.
\end_layout

\begin_layout Itemize
El cruce de dos individuos se hace escogiendo con igual probabilidad un
 gen de un progenitor o del otro.
 Por término medio, un 
\begin_inset Quotes eld
\end_inset

hijo
\begin_inset Quotes erd
\end_inset

 hereda la mitad de sus características de cada progenitor.
 La proporción de descencientes respecto a la población que se generan en
 cada paso lo regula el argumento 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{descendantsRatio}
\end_layout

\end_inset

, con el valor por defecto que muestra la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Valores por defecto de geneticAlgorithm"

\end_inset

.
\end_layout

\begin_layout Itemize
La mutación consiste en la variación de los genes del individuo de acuerdo
 a una probabilidad: cada gen del individuo tiene cierta probabilidad de
 ser cambiado en esta fase.
\end_layout

\begin_layout Itemize
Al final de cada ciclo generacional, la nueva población se compone a partir
 de los mejores individuos, sean estos nuevos descendientes o de la población
 actual.
 Así, el reemplazo consiste en la selección elitista de los mejores individuos.
\end_layout

\begin_layout Itemize
Como condición de parada para el algoritmo se contemplan diferentes opciones:
 tiempo máximo de ejecución, cantidad límite de pasos generacionales y número
 de pasos generacionales sin mejoras en la población.
 Se puede utilizar cualquier combinación de estos criterios.
 Los argumentos de la función para fijar estos valores son 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{timeTrigger}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{iterationTrigger}
\end_layout

\end_inset

 y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{convergenceTrigger}
\end_layout

\end_inset

, con los valores por defecto que aparecen en la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Valores por defecto de geneticAlgorithm"

\end_inset

.
\end_layout

\begin_layout Itemize
Para la fase de migración, cada instancia del algoritmo cuya población esté
 estancada tras una cantidad de pasos generacionales recibe el mejor individuo
 de otra población cualquiera.
 Este número de pasos sin mejora, que inicia el proceso de migración, se
 establece con el argumento 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{migrationTrigger}
\end_layout

\end_inset

, cuyo valor por defecto se muestra en la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Valores por defecto de geneticAlgorithm"

\end_inset

.
\end_layout

\begin_layout Standard
La función que implementa el algoritmo admite una serie de argumentos con
 los que establece las características y condiciones de la ejecución.
 Los valores por defecto que toman estos argumentos aparecen recogidos en
 la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Valores por defecto de geneticAlgorithm"

\end_inset

.
 Por su parte, la signatura de la función es como sigue:
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descripción
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{nPopulations}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
max(1, sesiones
\backslash
 interactivas
\backslash
 MATLAB)$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{nIndividuals}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$40$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{descendantsRatio}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$0.5$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{timeTrigger}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$60$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{iterationTrigger}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
infty$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{convergenceTrigger}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$20$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{migrationTrigger}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$5$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$P(selecci
\backslash
acute{o}n
\backslash
 de
\backslash
 individuo
\backslash
 para
\backslash
 cruce)$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$1 / n
\backslash
acute{u}mero
\backslash
 de
\backslash
 individuos$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$P(heredar
\backslash
 gen
\backslash
 de
\backslash
 progenitor_1)$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$0.5$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$P(heredar
\backslash
 gen
\backslash
 de
\backslash
 progenitor_2)$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$0.5$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$P(mutaci
\backslash
acute{o}n
\backslash
 en
\backslash
 gen)$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$0.5$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Valores por defecto del algoritmo genético distribuido
\begin_inset CommandInset label
LatexCommand label
name "tab:Valores por defecto de geneticAlgorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-5mm}
\backslash
texttt{
\backslash
begin{tabbing}
\end_layout

\begin_layout Plain Layout

bestIndexArray = gene
\backslash
=ticAlgorithm(selectionFunction, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> fitnessFunction, searchSpaceSize, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> nPopulations, nIndividuals, descendantsRatio, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> timeTrigger, iterationTrigger, ...
\end_layout

\begin_layout Plain Layout


\backslash

\backslash
 
\backslash
> convergenceTrigger, migrationTrigger)
\end_layout

\begin_layout Plain Layout


\backslash
end{tabbing}}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
